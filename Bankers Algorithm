
import java.util.Scanner;

public class BankersAlgorithm {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        // Taking input for number of processes
        System.out.print("Enter the number of processes: ");
        int n = input.nextInt();

        // Taking input for number of resources
        System.out.print("Enter the number of resources: ");
        int m = input.nextInt();

        // Taking input for the allocation matrix
        int[][] allocation = new int[n][m];
        System.out.println("Enter the allocation matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                allocation[i][j] = input.nextInt();
            }
        }

        // Taking input for the maximum matrix
        int[][] max = new int[n][m];
        System.out.println("Enter the maximum matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max[i][j] = input.nextInt();
            }
        }

        // Taking input for the available resources
        int[] available = new int[m];
        System.out.println("Enter the available resources:");
        for (int i = 0; i < m; i++) {
            available[i] = input.nextInt();
        }

        // Implementing the Banker's Algorithm
        boolean[] safe = new boolean[n];
        int[] work = available.clone();
        int[][] need = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                need[i][j] = max[i][j] - allocation[i][j];
            }
        }

        int count = 0;
        while (count < n) {
            boolean found = false;
            for (int i = 0; i < n; i++) {
                if (!safe[i]) {
                    int j;
                    for (j = 0; j < m; j++) {
                        if (need[i][j] > work[j]) {
                            break;
                        }
                    }
                    if (j == m) {
                        for (int k = 0; k < m; k++) {
                            work[k] += allocation[i][k];
                        }
                        safe[i] = true;
                        count++;
                        found = true;
                    }
                }
            }
            if (!found) {
                break;
            }
        }

        if (count == n) {
            System.out.println("The system is in safe state.");
        } else {
            System.out.println("The system is not in safe state.");
        }
    }
}
